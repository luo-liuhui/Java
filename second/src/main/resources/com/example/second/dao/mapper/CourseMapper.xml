<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.second.dao.CourseDao">
    <resultMap id="BaseResultMap" type="com.example.second.entity.Course">
        <id column="uid" property="uid" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="teacher" property="teacher" jdbcType="VARCHAR"/>
        <result column="coursenature" property="coursenature" jdbcType="VARCHAR"/>
        <result column="choose" property="choose" jdbcType="VARCHAR"/>
        <result column="point" property="point" jdbcType="VARCHAR"/>
        <result column="time" property="time" jdbcType="VARCHAR"/>
        <result column="endtime" property="time" jdbcType="VARCHAR"/>
        <result column="introduce" property="introduce" jdbcType="VARCHAR"/>
        <result column="school" property="school" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
        uid, name, teacher, coursenature,choose,point,introduce,time,endtime,school
    </sql>

    <select id="findAllCourses" resultType="com.example.second.entity.Course">
        select * from course
    </select>

    <select id="findCourseByName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select * from course where name = #{name,jdbcType=VARCHAR}
    </select>

    <delete id="deleteCoursesByIds">
        delete from course where uid in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

    <select id="getCountCourses" resultType="java.lang.Integer">
        select count(uid) as count from course
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from course
        where uid = #{uid,jdbcType=BIGINT}
    </select>
    <delete id="deleteCourseById" parameterType="java.lang.Long">
        delete from course
        where uid = #{uid,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="com.example.second.entity.Course">
        insert into course (uid, name, teacher, coursenature,choose,point,introduce,time)
        values (#{uid,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{teacher,jdbcType=VARCHAR},
                #{coursenature,jdbcType=VARCHAR},#{choose,jdbcType=VARCHAR},#{point,jdbcType=VARCHAR},
        #{introduce,jdbcType=VARCHAR},#{time,jdbcType=VARCHAR},#{endtime,jdbcType=VARCHAR},
                #{school,jdbcType=VARCHAR})
    </insert>
    <insert id="addCourse" parameterType="com.example.second.entity.Course">
        insert into course
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                uid,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="teacher != null">
                teacher,
            </if>
            <if test="coursenature != null">
                coursenature,
            </if>
            <if test="choose != null">
                choose,
            </if>
            <if test="point != null">
                point,
            </if>
            <if test="introduce != null">
                introduce,
            </if>
            <if test="time != null">
                time,
            </if>
            <if test="endtime != null">
                endtime,
            </if>
            <if test="school != null">
                school,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                #{uid,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="teacher != null">
                #{teacher,jdbcType=VARCHAR},
            </if>
            <if test="coursenature != null">
                #{coursenature,jdbcType=VARCHAR},
            </if>
            <if test="choose != null">
                #{choose,jdbcType=VARCHAR},
            </if>
            <if test="point != null">
                #{point,jdbcType=VARCHAR},
            </if>
            <if test="introduce != null">
                #{introduce,jdbcType=VARCHAR},
            </if>
            <if test="time != null">
                #{time,jdbcType=VARCHAR},
            </if>
            <if test="endtime != null">
                #{endtime,jdbcType=VARCHAR},
            </if>
            <if test="school != null">
                #{school,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateCourse" parameterType="com.example.second.entity.Course">
        update course
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="teacher != null">
                teacher = #{teacher,jdbcType=VARCHAR},
            </if>
            <if test="coursenature != null">
                coursenature = #{coursenature,jdbcType=VARCHAR},
            </if>
            <if test="choose != null">
                choose = #{choose,jdbcType=VARCHAR},
            </if>
            <if test="point != null">
                point = #{point,jdbcType=VARCHAR},
            </if>
            <if test="introduce != null">
                introduce = #{introduce,jdbcType=VARCHAR},
            </if>
            <if test="time != null">
                time = #{time,jdbcType=VARCHAR},
            </if>
            <if test="endtime != null">
                endtime = #{endtime,jdbcType=VARCHAR},
            </if>
            <if test="school != null">
                school = #{school,jdbcType=VARCHAR},
            </if>
        </set>
        where uid = #{uid,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.second.entity.Course">
        update course
        set name = #{name,jdbcType=VARCHAR},
        teacher = #{teacher,jdbcType=VARCHAR},
        coursenature = #{coursenature,jdbcType=VARCHAR},
        choose = #{choose,jdbcType=VARCHAR},
        point = #{point,jdbcType=VARCHAR},
        introduce = #{introduce,jdbcType=VARCHAR},
        time = #{time,jdbcType=VARCHAR},
        endtime = #{time,jdbcType=VARCHAR},
        school = #{school,jdbcType=VARCHAR}
        where uid = #{uid,jdbcType=BIGINT}
    </update>
</mapper>